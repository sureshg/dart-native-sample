name: Dart Build

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  schedule:
    - cron: 0 0 1 * 0

jobs:
  jit:
    name: DartVM (JIT)
    runs-on: ubuntu-latest

    container:
      image: google/dart:dev

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2.3.4

      - id: install
        name: Install dependencies
        run: dart pub get

      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        if: always() && steps.install.outcome == 'success'

      - name: Analyze project source
        run: dart analyze --fatal-warnings
        if: always() && steps.install.outcome == 'success'

      - name: Run tests
        run: dart test

      - name: Run App
        run: |
          dart bin/main.dart --help
          dart -DdefaultPort=8445 bin/main.dart -s

  aot:
    name: Dart2Native (AOT)
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        sdk:
          - dev
        include:
          - os: ubuntu-latest
            bin-name: test-server-linux
          - os: macos-latest
            bin-name: test-server-mac
          - os: windows-latest
            bin-name: test-server-win.exe
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2.3.4

      - name: Install Dart SDK ${{ matrix.sdk }} on ${{ matrix.os }}
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.sdk }}

      - id: install
        name: Install dependencies
        run: dart pub get

      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        if: always() && steps.install.outcome == 'success'

      - name: Analyze project source
        run: dart analyze --fatal-warnings
        if: always() && steps.install.outcome == 'success'

      - name: Run tests
        run: dart test

      # - name: Generate Coverage
      #   run: pub run test_coverage --no-badge

      # - name: Upload Coverage
      # uses: codecov/codecov-action@v1.0.7

      # - name: Cache Dart packages
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.pub-cache
      #     key: ${{ runner.os }}-dart-${{ hashFiles('**/pubspec.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-dart-

      - name: Dart2Native Build
        run: |
          dart --version
          dart2native bin/main.dart -v -DdefaultPort=8445 -o ${{ matrix.bin-name }}
          echo "The binary file name is ${{ matrix.bin-name }}"

      - name: Uploading ${{ matrix.bin-name }}
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.bin-name }}
          path: |
            ${{ matrix.bin-name }}
          if-no-files-found: error

  test:
    name: Test Native Binaries
    needs: aot
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        include:
          - os: ubuntu-latest
            bin-name: test-server-linux
          - os: macos-latest
            bin-name: test-server-mac
          - os: windows-latest
            bin-name: test-server-win.exe

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.bin-name }}

      - name: Testing on windows
        if: startsWith(matrix.os, 'windows')
        run: |
          $server = "${{ matrix.bin-name }}"
          iex ".\$server --help"
          iex ".\$server -s"

      - name: Testing on linux/macos
        if: "!startsWith(matrix.os, 'windows')"
        run: |
          server=${{ matrix.bin-name }}
          chmod +x $server
          ./$server --help
          ./$server -s
